#!/bin/sh

NFT=${NFT:-nft}
QUEUE_PRIORITY="-145"
MANGLE_PRIORITY="-145"
TABLE_NAME="packetd"

is_queue_open()
{
    local l_queue_stat
    local l_queue_mode
    local l_queue_size

    FIRST_QUEUE="`echo $PACKETD_QUEUE | sed 's/-.*//'`"

    # make sure the nfnetlink_queue file is available
    if [ ! -f /proc/net/netfilter/nfnetlink_queue ]; then
        echo "The netfilter nfnetlink_queue does not exist - not inserting rules for packetd"
        return 1
    fi

    # see if our queue is active
    l_queue_stat=`awk -v queue=${FIRST_QUEUE} '{ if ( $1 == queue ) print $2 }' /proc/net/netfilter/nfnetlink_queue`

    if [ -z "${l_queue_stat}" ]; then
        echo "The packetd netfilter queue ${FIRST_QUEUE} is not open - not inserting rules for packetd"
        return 1
    fi

    # see if the queue copy mode is what we expect
    l_queue_mode=`awk -v queue=${FIRST_QUEUE} '{ if ( $1 == queue )print $4 }' /proc/net/netfilter/nfnetlink_queue`

    if [ $((l_queue_mode)) -ne 2 ]; then
        echo "Unexpected queue copy mode ${FIRST_QUEUE} - not inserting rules for packetd"
        return 1
    fi

    # see if the queue copy size is what we expect
    l_queue_mode=`awk -v queue=${FIRST_QUEUE} '{ if ( $1 == queue ) print $5 }' /proc/net/netfilter/nfnetlink_queue`

    if [ $((l_queue_mode)) -ne 32768 ]; then
        echo "Unexpected queue copy size ${FIRST_QUEUE} - not inserting rules for packetd"
        return 1
    fi

    # the queue is open and seems to be owned by packetd so return success
    return 0
}

remove_packetd_rules()
{
    ${NFT} flush chain inet ${TABLE_NAME} packetd-prerouting 2>/dev/null
    ${NFT} flush chain inet ${TABLE_NAME} packetd-input 2>/dev/null
    ${NFT} flush chain inet ${TABLE_NAME} packetd-output 2>/dev/null
    ${NFT} flush chain inet ${TABLE_NAME} packetd-queue 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-prerouting 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-input 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-output 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-queue 2>/dev/null
    ${NFT} delete table inet ${TABLE_NAME} 2>/dev/null
}

insert_packetd_rules()
{
    # create the tables if needed
    ${NFT} add table inet ${TABLE_NAME}

    # create chains
    ${NFT} add chain inet ${TABLE_NAME} packetd-prerouting "{ type filter hook prerouting priority $QUEUE_PRIORITY ; }"
    ${NFT} flush chain inet ${TABLE_NAME} packetd-prerouting
    ${NFT} add chain inet ${TABLE_NAME} packetd-output "{ type filter hook output priority $MANGLE_PRIORITY ; }"
    ${NFT} flush chain inet ${TABLE_NAME} packetd-output
    ${NFT} add chain inet ${TABLE_NAME} packetd-input "{ type filter hook input priority $MANGLE_PRIORITY ; }"
    ${NFT} flush chain inet ${TABLE_NAME} packetd-input
    ${NFT} add chain inet ${TABLE_NAME} packetd-queue
    ${NFT} flush chain inet ${TABLE_NAME} packetd-queue

    # Set bypass bit on all local-outbound sessions
    ${NFT} add rule inet ${TABLE_NAME} packetd-output ct state new ct mark set ct mark or 0x80000000
    ${NFT} add rule inet ${TABLE_NAME} packetd-output goto packetd-queue

    # Set bypass bit on all local-inbound sessions (except DNS)
    ${NFT} add rule inet ${TABLE_NAME} packetd-input udp dport 53 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-input tcp dport 53 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-input ct state new ct mark set ct mark or 0x80000000

    # Catch packets in prerouting
    ${NFT} add rule inet ${TABLE_NAME} packetd-prerouting goto packetd-queue

    # Don't catch loopback traffic
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip saddr 127.0.0.1/8 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip daddr 127.0.0.1/8 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip6 saddr ::1 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip6 daddr ::1 return

    # Do not queue invalid or untracked packets
    # These will not have a valid conntrack ID so there is nothing for packetd to attach metadata to
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct state invalid return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct state untracked return

    # In case we are quickly reusing a conntrack id, flush the sessions dictionary on new connections
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct state new counter dict sessions ct id flush

    # Don't catch bypassed traffic
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue dict sessions ct id bypass_packetd bool true counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct mark and 0x80000000 == 0x80000000 counter return

    # Only catch unicast traffic
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib saddr type anycast counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib daddr type anycast counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib saddr type broadcast counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib daddr type broadcast counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib saddr type multicast counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib daddr type multicast counter return

    # Set the new packet mark
    # We must actually set this mark so that packetd can tell this is a "new" packet
    # If it tries to predict if its a new packet based on the tuple and/or the conntrack ID it will sometimes fail
    # This happens when a "new" packet gets dropped before conntrack confirmation. In this case a subsequent packet
    # that may have the same tuple, and actually may get exactly the same semi-random conntrack ID.
    # To packetd this will look like a second packet, but netfilter considers this a new packet.
    # The only reliable way to let packetd know this is a new packet is by setting the mark before queueing
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct state new mark set "mark|0x10000000"

    # Queue the traffic
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue counter queue num ${PACKETD_QUEUE} fanout,bypass
}

usage() {
    echo "$0 [options] queue-number/queue-range"
    echo "optional options: "
    echo " -r              (force removal only)"
    echo " -i              (force insert only)"
    echo " -h              (help)"
    echo
    echo "example:"
    echo "$0 2000-2003"
    echo
}

##### Start of script

OP=""
while getopts "rih" opt; do
  case $opt in
    r) OP="remove";;
    i) OP="insert";;
    h) usage;exit 1;;
    *) usage;exit 1;;
  esac
done
shift $(($OPTIND-1))

if [ -z "$1" ] ; then
    usage
    exit 1
fi

PACKETD_QUEUE="$1"

## make sure we are called as root
USERVAL=`id -u`
if test ${USERVAL} -ne 0
then
  printf "\n  ERROR: You must be root to run this script\n\n"
  exit
fi

## Source the configuration file if available
if [ -f /etc/default/untangle-packetd ]; then
    . /etc/default/untangle-packetd
fi

if [ "$OP" = "remove" ] ; then
    remove_packetd_rules
    echo "packetd netfilter rules removed."
    exit 0
elif [ "$OP" = "insert" ] ; then
    insert_packetd_rules
    echo "packetd netfilter rules inserted."
    exit 0
else
    remove_packetd_rules
    is_queue_open && {
        insert_packetd_rules
        echo "packetd netfilter rules inserted."
    }
fi

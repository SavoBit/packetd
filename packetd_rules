#!/bin/sh

NFT=${NFT:-nft}
PACKETD_QUEUE_NUM=1818
QUEUE_PRIORITY="-145"
MANGLE_PRIORITY="-150"

is_queue_open()
{
    local l_queue_stat
    local l_queue_mode
    local l_queue_size

    # make sure the nfnetlink_queue file is available
    if [ ! -f /proc/net/netfilter/nfnetlink_queue ]; then
        echo "[`date`] The netfilter nfnetlink_queue does not exist - not inserting rules for packetd"
        return 1
    fi

    # see if our queue is active
    l_queue_stat=`awk -v queue=${PACKETD_QUEUE_NUM} '{ if ( $1 == queue ) print $2 }' /proc/net/netfilter/nfnetlink_queue`

    if [ -z "${l_queue_stat}" ]; then
        echo "[`date`] The packetd netfilter queue is not open - not inserting rules for packetd"
        return 1
    fi

    # see if the queue copy mode is what we expect
    l_queue_mode=`awk -v queue=${PACKETD_QUEUE_NUM} '{ if ( $1 == queue )print $4 }' /proc/net/netfilter/nfnetlink_queue`

    if [ $((l_queue_mode)) -ne 2 ]; then
        echo "[`date`] Unexpected queue copy mode - not inserting rules for packetd"
        return 1
    fi

    # see if the queue copy size is what we expect
    l_queue_mode=`awk -v queue=${PACKETD_QUEUE_NUM} '{ if ( $1 == queue ) print $5 }' /proc/net/netfilter/nfnetlink_queue`

    if [ $((l_queue_mode)) -ne 32768 ]; then
        echo "[`date`] Unexpected queue copy size - not inserting rules for packetd"
        return 1
    fi

    # the queue is open and seems to be owned by packetd so return success
    return 0
}

remove_packetd_rules()
{
    ${NFT} flush chain ip filter prerouting-packetd 2>/dev/null
    ${NFT} flush chain ip filter input-packetd 2>/dev/null
    ${NFT} flush chain ip filter output-packetd 2>/dev/null
    ${NFT} delete chain ip filter prerouting-packetd 2>/dev/null
    ${NFT} delete chain ip filter input-packetd 2>/dev/null
    ${NFT} delete chain ip filter output-packetd 2>/dev/null
    ${NFT} delete table ip filter

    ${NFT} flush chain ip6 filter prerouting-packetd 2>/dev/null
    ${NFT} flush chain ip6 filter input-packetd 2>/dev/null
    ${NFT} flush chain ip6 filter output-packetd 2>/dev/null
    ${NFT} delete chain ip6 filter prerouting-packetd 2>/dev/null
    ${NFT} delete chain ip6 filter input-packetd 2>/dev/null
    ${NFT} delete chain ip6 filter output-packetd 2>/dev/null
    ${NFT} delete table ip6 filter
}

insert_packetd_rules()
{
    # create the tables if needed
    ${NFT} add table ip filter
    ${NFT} add chain ip filter prerouting-packetd "{ type filter hook prerouting priority $QUEUE_PRIORITY ; }"
    ${NFT} flush chain ip filter prerouting-packetd

    ${NFT} add table ip6 filter
    ${NFT} add chain ip6 filter prerouting-packetd "{ type filter hook prerouting priority $QUEUE_PRIORITY ; }"
    ${NFT} flush chain ip6 filter prerouting-packetd

    # Create chains for setting the connmark on input/output
    ${NFT} add chain ip filter output-packetd "{ type filter hook output priority $MANGLE_PRIORITY ; }"
    ${NFT} add chain ip filter input-packetd "{ type filter hook input priority $MANGLE_PRIORITY ; }"
    ${NFT} flush chain ip filter output-packetd
    ${NFT} flush chain ip filter input-packetd

    ${NFT} add chain ip6 filter output-packetd "{ type filter hook output priority $MANGLE_PRIORITY ; }"
    ${NFT} add chain ip6 filter input-packetd "{ type filter hook input priority $MANGLE_PRIORITY ; }"
    ${NFT} flush chain ip6 filter output-packetd
    ${NFT} flush chain ip6 filter input-packetd

    # Set bypass bit on local traffic
    ${NFT} add rule ip filter output-packetd ct mark set "mark|0xf0000000"
    ${NFT} add rule ip filter input-packetd ct mark set "mark|0xf0000000"

    ${NFT} add rule ip6 filter output-packetd ct mark set "mark|0xf0000000"
    ${NFT} add rule ip6 filter input-packetd ct mark set "mark|0xf0000000"

    # Don't catch loopback traffic
    ${NFT} add rule ip filter prerouting-packetd ip saddr 127.0.0.1/8 return
    ${NFT} add rule ip filter prerouting-packetd ip daddr 127.0.0.1/8 return

    # Local?
    # ${NFT} add rule ip filter prerouting-packetd fib daddr . oif type local return
    # ${NFT} add rule ip6 filter prerouting-packetd fib daddr . oif type local return

    # Don't catch bypassed traffic
    ${NFT} add rule ip filter prerouting-packetd dict session ct id bypass_packetd bool true counter return
    ${NFT} add rule ip filter prerouting-packetd ct mark and 0xf0000000 == 0xf0000000 counter return

    ${NFT} add rule ip6 filter prerouting-packetd dict session ct id bypass_packetd bool true counter return
    ${NFT} add rule ip6 filter prerouting-packetd ct mark and 0xf0000000 == 0xf0000000 counter return

    # Queue the traffic
    ${NFT} add rule ip filter prerouting-packetd counter queue num ${PACKETD_QUEUE_NUM} bypass
    ${NFT} add rule ip6 filter prerouting-packetd counter queue num ${PACKETD_QUEUE_NUM} bypass
}

usage() {
    echo "$0 [options]"
    echo "optional options: "
    echo " -r              (force removal only)"
    echo " -i              (force insert only)"
    echo " -h              (help)"
    echo
}

##### Start of script

OP=""
while getopts "rih" opt; do
  case $opt in
    r) OP="remove";;
    i) OP="insert";;
    h) usage;exit 0;;
    *) usage;exit 0;;
  esac
done


## make sure we are called as root
USERVAL=`id -u`
if test ${USERVAL} -ne 0
then
  printf "\n  ERROR: You must be root to run this script\n\n"
  exit
fi

## Source the configuration file if available
if [ -f /etc/default/untangle-packetd ]; then
    . /etc/default/untangle-packetd
fi

if [ "$OP" = "remove" ] ; then
    remove_packetd_rules
    echo "[`date`] The packetd netfilter rules removed."
    exit 0
elif [ "$OP" = "insert" ] ; then
    insert_packetd_rules
    echo "[`date`] The packetd netfilter rules inserted."
    exit 0
else
    remove_packetd_rules
    is_queue_open && {
        insert_packetd_rules
        echo "[`date`] The packetd netfilter rules inserted."
    }
fi
